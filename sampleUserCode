-
-
- App.js
  sampleUserButtonRender function
  loadSampleUser: () => dispatch(signInSampleUser()),
  signedIn: state.userStatus.signedIn,
  import { signInSampleUser } from "../redux/actions";
  import Message from "../components/Message/Message";
  import Button from "../components/Forms/Button/Button";

-
-
- index.css
  .sample-user-message-wrapper {
  margin: var(--spacing-large);
  margin-top: var(--spacing-medium);
  }
  .sample-user-message {
  color: #f5f5f5;
  }
  .sample-user-button-wrapper {
  margin-top: 3rem
  }
  .sample-user-button {
  color: #f5f5f5;
  border-color: #f5f5f5;
  }
  .sample-user-button:hover,
  .sample-user-button:focus {
  border-color: black;
  }

-
-
- constants.js
  export const LOAD_SAMPLE_USER = 'SAMPLE_USER';

-
-
- reducers.js
  sampleUser: false,
  case LOAD_SAMPLE_USER:
  return {
  ...state,
  user: {
  userId: 1,
  firstName: "Sample",
  lastName: "User",
  email: "sampleUser@example.com",
  username: "1",
  joined: "1970-01-01 00:00:00.000Z",
  },
  signedIn: true,
  sampleUser: true,
  };
  sampleUserNewDeckId: 1000,
  sampleUserNewCardId: 1000,
  case ADD_DECK:
  sampleUserNewDeckId: state.sampleUserNewDeckId + 1,
  };
  case ADD_CARD:
  sampleUserNewCardId: state.sampleUserNewCardId + 1,
  };

-
-
- actions.js
  const loadSampleUser = () => ({ type: LOAD_SAMPLE_USER });
  export const signInSampleUser = () => (dispatch) => {
  batch(() => {
  dispatch(loadSampleUser());
  dispatch(routeChangeAndResetError("home"));
  });
  };

-
-
- Deck.js
  const mapStateToProps = state => ({
  sampleUser: state.userStatus.sampleUser
  })
  if (sampleUser) {
  onDelete(deckId)
  return;
  }
  connect(mapStateToProps
  const { sampleUser } = this.props;

-
-
- NewDeckOrCard.js
  const mapStateToProps = (state) => ({
  sampleUser: state.userStatus.sampleUser,
  });
  sampleUser, // from mapStateToProps
  sampleUserNewDeckOrCardId, // keeps track of sampleUsers new decks and cards with their own id numbers
  if (sampleUser) {
  if (deckId) {
  // saving a card
  onSave(
  {
  cardId: sampleUserNewDeckOrCardId,
  score: 0,
  term: mainField.value,
  definition: secondaryField.value,
  },
  actionCallback
  );
  } else {
  // saving a deck
  onSave(
  {
  userId,
  deckId: sampleUserNewDeckOrCardId,
  deckName: mainField.value,
  description: secondaryField.value,
  },
  actionCallback
  );
  }
  resetInput();
  return;
  }
  connect(mapStateToProps

-
-
- Decks.js
  sampleUserNewDeckId: state.decks.sampleUserNewDeckId,
  const { sampleUserNewDeckId } = this.props;
  sampleUserNewDeckOrCardId={sampleUserNewDeckId}

  -
  -
  - Editor.js
    sampleUserNewCardId: state.currentDeck.sampleUserNewCardId,
    const Editor = ({sampleUserNewCardId})
    sampleUserNewDeckOrCardId={sampleUserNewCardId}

-
-
- Profile.js
  import { signOutUser } from "../../redux/actions";
  sampleUser: state.userStatus.sampleUser,
  onDeleteSampleUser: (error) => dispatch(signOutUser(error)),
  const Profile = ({onDeleteSampleUser })
  const handleDeleteUser = () => {
  if (sampleUser) {
  onDeleteSampleUser(error)
  } else {
  deleteUser(userId, username, error)
  }
  }
  onClick={handleDeleteUser}

-
-
- CardEditor.js
  const mapStateToProps = (state) => ({
  sampleUser: state.userStatus.sampleUser,
  });
  connect(mapStateToProps
  const CardEditor = ({ sampleUser })
  saveChangesDeckOrCard(sampleUser)
  if (sampleUser) {
  onDelete(cardId);
  return;
  }

-
-
- DeckEditor.js
  sampleUser: state.userStatus.sampleUser,
  const DeckEditor = ({ sampleUser })
  saveChangesDeckOrCard(sampleUser)

-
-
- ScoreCounter.js
  const mapStateToProps = (state) => ({
  sampleUser: state.userStatus.sampleUser,
  });
  connect(mapStateToProps
  const ScoreCounter = ({sampleUser,
  if (sampleUser) {
  onUpdateScore(cardId, incrementValue);
  if (error) {
  setErrorCallback("");
  }
  return;
  }

  -
  -
  - repeatedFunctions.js
    export const saveChangesDeckOrCard = (
    sampleUser // true or false
    if (sampleUser) {
    actionCallback(mainFieldNewValue, secondaryFieldNewValue, secondaryId);
    return;
    }
